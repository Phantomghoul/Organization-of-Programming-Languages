open Funs 

(***********************************)
(* Part 1: Non-Recursive Functions *)
(***********************************)

let abs x = if x > 0 then
    x
  else
    x * -1;;

let rev_tup (x,y,z) = (z,y,x);;

let is_even x = 
  if x mod 2 = 0 then
    true 
  else 
    false;;

let area (a,b) (c,d) = 
  let x = abs (c - a) in
  let y = abs (d - b) in
  x * y;;

(*******************************)
(* Part 2: Recursive Functions *)
(*******************************)

let rec fibonacci n = 
  if n <= 1 then
    n
  else 
    fibonacci (n-1) + fibonacci(n-2);;

let rec pow x p = 
  if p = 0 then 
    1
  else
    pow x (p-1) * x;;

let rec log x y = 
  if y <= (x-1) then
    0
  else 
    1 + log x (y/x);;

let rec gcf x y = 
  if y = 0 then 
    x
  else 
    gcf y (x mod y);;

(*****************)
(* Part 3: Lists *)
(*****************)

let rec append l m = match l with
  |[] -> m
  | (x::xs) -> x::append xs m;;
let rec reverse lst = match lst with
  |[] -> []
  |(x::xs) -> append (reverse xs) (x::[]);;

let rec zip lst1 lst2 = match lst1,lst2 with 
  | ([],_) -> []
  | (_,[]) -> []
  |([(a,b)],[(c,d)]) -> [(a,b,c,d)] (*reached the end of the list*)
  |((a,b)::l1 , (c,d)::l2) -> (a,b,c,d)::zip l1 l2;;

let rec merge lst1 lst2 = match lst1, lst2 with 
  |[],l->l
  |l,[]->l
  |(h1::t1, h2::t2)-> if h1<h2 then h1::merge t1 lst2 else h2::merge lst1 t2;;

let rec is_present lst x = match lst with
  | [] -> false
  | (hd ::tl) -> if hd = x then true
      else is_present tl x;;
let every_nth n lst =
  (*iteration*)(let rec helper i lst = match lst with
    | [] -> []  
    | (a::b) -> if i mod n = 0 then a::helper (i+1) b  
        else helper (i+1) b       
   in
   helper 1 lst);;  


      
let jumping_tuples lst1 lst2 = 
  
  let rec firsthalf l1 l2 i ans = match (l1,l2) with
    |([],[]) -> ans
             
    |((a,b)::c,(d,e)::f) -> if i mod 2 = 1 then firsthalf c f (i+1) (e::ans)
(*odd*) else firsthalf c f (i+1) (a::ans)
            
  and secondhalf l1 l2 i ans = match (l1,l2) with
    |([],[]) -> ans
             
    |((a,b)::c, (d,e)::f) -> if i mod 2 = 1 then secondhalf c f (i+1) (a::ans)
        else secondhalf c f (i+1) (e::ans)
  in 
  reverse (secondhalf lst1 lst2 0 []) @ reverse (firsthalf lst1 lst2 0 []);;

let rec max_func_chain init funcs = failwith "not implemented"